#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
T3_alpha v1.2：男胎Y染色体浓度达标时间分析
专注于Y染色体浓度达标时间的影响因素分析和NIPT时点优化
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')
import os
from datetime import datetime
import json

# 设置中文字体显示
plt.rcParams['font.sans-serif'] = ['SimHei', 'DejaVu Sans', 'Liberation Sans', 'sans-serif']
plt.rcParams['axes.unicode_minus'] = False

def main():
    print("🚀 开始T3_alpha v1.2 Y染色体浓度达标时间分析...")
    
    # 获取项目根目录
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(script_dir))))
    
    # 读取数据
    data_path = os.path.join(project_root, 'data', 'common', 'source', 'dataA.csv')
    data = pd.read_csv(data_path, header=None)
    
    # 列名映射
    columns = ['样本序号', '孕妇代码', '孕妇年龄', '孕妇身高', '孕妇体重', '末次月经时间',
               'IVF妊娠方式', '检测时间', '检测抽血次数', '孕妇本次检测时的孕周', '孕妇BMI指标',
               '原始测序数据的总读段数', '总读段数中在参考基因组上比对的比例', '总读段数中重复读段的比例',
               '总读段数中唯一比对的读段数', 'GC含量', '13号染色体的Z值', '18号染色体的Z值',
               '21号染色体的Z值', 'X染色体的Z值', 'Y染色体的Z值', 'Y染色体浓度',
               'X染色体浓度', '13号染色体的GC含量', '18号染色体的GC含量', '21号染色体的GC含量',
               '被过滤掉的读段数占总读段数的比例', '检测出的染色体异常', '孕妇的怀孕次数',
               '孕妇的生产次数', '胎儿是否健康']
    data.columns = columns
    
    # 数值转换
    numeric_columns = ['孕妇年龄', '孕妇身高', '孕妇体重', '孕妇BMI指标',
                      '原始测序数据的总读段数', '总读段数中在参考基因组上比对的比例', 
                      '总读段数中重复读段的比例', '总读段数中唯一比对的读段数', 'GC含量', 
                      '13号染色体的Z值', '18号染色体的Z值', '21号染色体的Z值', 
                      'X染色体的Z值', 'Y染色体的Z值', 'Y染色体浓度',
                      'X染色体浓度', '13号染色体的GC含量', '18号染色体的GC含量', '21号染色体的GC含量',
                      '被过滤掉的读段数占总读段数的比例']
    
    def safe_float_convert(x):
        try:
            return float(x)
        except:
            return np.nan
            
    for col in numeric_columns:
        data[col] = data[col].apply(safe_float_convert)
    
    # 孕周解析
    def convert_gestational_age(age_str):
        try:
            if isinstance(age_str, str):
                if '+' in age_str:
                    weeks, days = age_str.split('w+')
                    return float(weeks) + float(days)/7
                elif 'w' in age_str:
                    return float(age_str.split('w')[0])
            return float(age_str)
        except:
            return np.nan
            
    data['孕周数值'] = data['孕妇本次检测时的孕周'].apply(convert_gestational_age)
    
    # 筛选男胎数据
    male_data = data[(data['Y染色体浓度'].notna()) & 
                      (data['Y染色体浓度'] > 0)].copy()
    
    # 创建Y染色体浓度达标标签（≥4%）
    male_data['Y染色体达标'] = (male_data['Y染色体浓度'] >= 0.04).astype(int)
    
    # 计算达标比例
    达标比例 = male_data['Y染色体达标'].mean()
    
    print(f"总样本数: {len(data)}")
    print(f"男胎样本数: {len(male_data)}")
    print(f"Y染色体浓度达标样本数: {male_data['Y染色体达标'].sum()}")
    print(f"Y染色体浓度达标比例: {达标比例:.2%}")
    
    # BMI分组分析
    print("\n=== BMI分组分析 ===")
    male_data['BMI分组'] = pd.cut(
        male_data['孕妇BMI指标'],
        bins=[0, 18.5, 24, 28, 35, np.inf],
        labels=['偏瘦', '正常', '超重', '肥胖', '极度肥胖'],
        include_lowest=True
    )
    
    # 分析各组的Y染色体浓度达标情况
    group_analysis = male_data.groupby('BMI分组').agg({
        'Y染色体浓度': ['count', 'mean', 'std'],
        'Y染色体达标': ['sum', 'mean'],
        '孕周数值': ['mean', 'std']
    }).round(4)
    
    print("各BMI组的Y染色体浓度达标情况:")
    print(group_analysis)
    
    # 计算各组的达标比例
    达标比例_by_group = male_data.groupby('BMI分组')['Y染色体达标'].mean()
    print("\n各BMI组的Y染色体浓度达标比例:")
    for group, ratio in 达标比例_by_group.items():
        print(f"  {group}: {ratio:.2%}")
    
    # 相关性分析
    print("\n=== 相关性分析 ===")
    features = ['孕妇年龄', '孕妇身高', '孕妇体重', '孕妇BMI指标', '孕周数值', 'Y染色体浓度']
    corr_data = male_data[features + ['Y染色体达标']].dropna()
    correlation_matrix = corr_data.corr()
    
    print("Y染色体浓度达标与各因素的相关性:")
    y_corr = correlation_matrix['Y染色体达标'].drop('Y染色体达标').sort_values(ascending=False)
    for feature, corr in y_corr.items():
        print(f"  {feature}: {corr:.4f}")
    
    # 回归分析
    print("\n=== 回归分析 ===")
    feature_columns = ['孕妇年龄', '孕妇身高', '孕妇体重', '孕妇BMI指标', '孕周数值']
    analysis_data = male_data[feature_columns + ['Y染色体浓度']].dropna()
    X = analysis_data[feature_columns]
    y = analysis_data['Y染色体浓度']
    
    lr = LinearRegression()
    lr.fit(X, y)
    y_pred = lr.predict(X)
    r2 = r2_score(y, y_pred)
    mse = mean_squared_error(y, y_pred)
    
    print(f"线性回归 R²: {r2:.4f}")
    print(f"线性回归 MSE: {mse:.4f}")
    
    # 特征重要性
    feature_importance = pd.DataFrame({
        'feature': feature_columns,
        'coefficient': lr.coef_,
        'abs_coefficient': np.abs(lr.coef_)
    }).sort_values('abs_coefficient', ascending=False)
    
    print("特征重要性排序:")
    for _, row in feature_importance.iterrows():
        print(f"  {row['feature']}: {row['coefficient']:.4f}")
    
    # 最佳NIPT时点分析
    print("\n=== 最佳NIPT时点分析 ===")
    optimal_timing = {}
    
    for group in male_data['BMI分组'].cat.categories:
        group_data = male_data[male_data['BMI分组'] == group]
        
        if len(group_data) < 10:
            continue
            
        # 按孕周分组分析达标率
        gestational_weeks = np.arange(10, 25, 1)
        达标率_by_week = []
        
        for week in gestational_weeks:
            week_data = group_data[
                (group_data['孕周数值'] >= week) & 
                (group_data['孕周数值'] < week + 1)
            ]
            if len(week_data) > 0:
                达标率 = week_data['Y染色体达标'].mean()
                达标率_by_week.append(达标率)
            else:
                达标率_by_week.append(np.nan)
        
        # 找到达标率最高的孕周
        valid_indices = ~np.isnan(达标率_by_week)
        if np.any(valid_indices):
            best_week_idx = np.nanargmax(达标率_by_week)
            best_week = gestational_weeks[best_week_idx]
            best_rate =达标率_by_week[best_week_idx]
            
            optimal_timing[group] = {
                '最佳孕周': float(best_week),
                '达标率': float(best_rate),
                '样本数': len(group_data)
            }
            
            print(f"{group}组: 最佳NIPT时点 {best_week:.1f}周, 达标率 {best_rate:.2%}")
    
    # 检测误差影响分析
    print("\n=== 检测误差影响分析 ===")
    error_levels = [0.01, 0.02, 0.05, 0.1]
    error_impact = {}
    
    for error_level in error_levels:
        np.random.seed(42)
        error = np.random.normal(0, error_level, len(male_data))
        y_concentration_with_error = male_data['Y染色体浓度'] + error
        
        达标率_with_error = (y_concentration_with_error >= 0.04).mean()
        原始达标率 = male_data['Y染色体达标'].mean()
        
        影响程度 = abs(达标率_with_error - 原始达标率) / 原始达标率
        
        error_impact[f'{error_level*100:.0f}%误差'] = {
            '原始达标率': float(原始达标率),
            '误差后达标率': float(达标率_with_error),
            '影响程度': float(影响程度)
        }
        
        print(f"{error_level*100:.0f}%误差: 达标率 {原始达标率:.2%} → {达标率_with_error:.2%}, 影响程度 {影响程度:.2%}")
    
    # 风险最小化分析
    print("\n=== 风险最小化分析 ===")
    risk_analysis = {}
    
    for group in male_data['BMI分组'].cat.categories:
        group_data = male_data[male_data['BMI分组'] == group]
        
        if len(group_data) < 10:
            continue
            
        总样本数 = len(group_data)
        达标样本数 = group_data['Y染色体达标'].sum()
        未达标样本数 = 总样本数 - 达标样本数
        
        风险率 = 未达标样本数 / 总样本数
        平均孕周 = group_data['孕周数值'].mean()
        孕周标准差 = group_data['孕周数值'].std()
        
        risk_analysis[group] = {
            '总样本数': int(总样本数),
            '达标样本数': int(达标样本数),
            '未达标样本数': int(未达标样本数),
            '风险率': float(风险率),
            '平均孕周': float(平均孕周),
            '孕周标准差': float(孕周标准差)
        }
        
        print(f"{group}组: 风险率 {风险率:.2%}, 平均孕周 {平均孕周:.1f}周")
    
    # 生成可视化
    print("\n=== 生成可视化 ===")
    results_dir = os.path.join(project_root, 'results', 'T3', 'alpha', 'v1.2')
    os.makedirs(results_dir, exist_ok=True)
    
    # Y染色体浓度分布图
    plt.figure(figsize=(15, 10))
    
    # 子图1: 整体分布
    plt.subplot(2, 3, 1)
    plt.hist(male_data['Y染色体浓度'], bins=30, alpha=0.7, color='skyblue', edgecolor='black')
    plt.axvline(x=0.04, color='red', linestyle='--', linewidth=2, label='达标阈值 (4%)')
    plt.xlabel('Y染色体浓度')
    plt.ylabel('频数')
    plt.title('Y染色体浓度分布')
    plt.legend()
    
    # 子图2: 按BMI分组分布
    plt.subplot(2, 3, 2)
    for group in male_data['BMI分组'].cat.categories:
        group_data = male_data[male_data['BMI分组'] == group]
        if len(group_data) > 0:
            plt.hist(group_data['Y染色体浓度'], alpha=0.6, label=group, bins=20)
    plt.axvline(x=0.04, color='red', linestyle='--', linewidth=2, label='达标阈值')
    plt.xlabel('Y染色体浓度')
    plt.ylabel('频数')
    plt.title('按BMI分组的Y染色体浓度分布')
    plt.legend()
    
    # 子图3: 达标率对比
    plt.subplot(2, 3, 3)
    达标率_by_group = male_data.groupby('BMI分组')['Y染色体达标'].mean()
    bars = plt.bar(range(len(达标率_by_group)), 达标率_by_group.values, 
                  color=['lightcoral', 'lightblue', 'lightgreen', 'orange', 'purple'])
    plt.xticks(range(len(达标率_by_group)), 达标率_by_group.index, rotation=45)
    plt.ylabel('达标率')
    plt.title('各BMI组Y染色体浓度达标率')
    plt.ylim(0, 1)
    
    # 添加数值标签
    for i, bar in enumerate(bars):
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                f'{height:.2%}', ha='center', va='bottom')
    
    # 子图4: 孕周与Y染色体浓度关系
    plt.subplot(2, 3, 4)
    scatter = plt.scatter(male_data['孕周数值'], male_data['Y染色体浓度'], 
                        c=male_data['Y染色体达标'], cmap='RdYlBu_r', alpha=0.6)
    plt.axhline(y=0.04, color='red', linestyle='--', linewidth=2, label='达标阈值')
    plt.xlabel('孕周')
    plt.ylabel('Y染色体浓度')
    plt.title('孕周与Y染色体浓度关系')
    plt.colorbar(scatter, label='达标状态')
    plt.legend()
    
    # 子图5: 年龄与Y染色体浓度关系
    plt.subplot(2, 3, 5)
    scatter = plt.scatter(male_data['孕妇年龄'], male_data['Y染色体浓度'], 
                        c=male_data['Y染色体达标'], cmap='RdYlBu_r', alpha=0.6)
    plt.axhline(y=0.04, color='red', linestyle='--', linewidth=2, label='达标阈值')
    plt.xlabel('孕妇年龄')
    plt.ylabel('Y染色体浓度')
    plt.title('孕妇年龄与Y染色体浓度关系')
    plt.colorbar(scatter, label='达标状态')
    plt.legend()
    
    # 子图6: BMI与Y染色体浓度关系
    plt.subplot(2, 3, 6)
    scatter = plt.scatter(male_data['孕妇BMI指标'], male_data['Y染色体浓度'], 
                        c=male_data['Y染色体达标'], cmap='RdYlBu_r', alpha=0.6)
    plt.axhline(y=0.04, color='red', linestyle='--', linewidth=2, label='达标阈值')
    plt.xlabel('孕妇BMI')
    plt.ylabel('Y染色体浓度')
    plt.title('孕妇BMI与Y染色体浓度关系')
    plt.colorbar(scatter, label='达标状态')
    plt.legend()
    
    plt.tight_layout()
    plt.savefig(os.path.join(results_dir, 'T3_alpha_v1.2_Y染色体浓度分析.png'), 
               dpi=300, bbox_inches='tight')
    plt.close()
    
    # 生成报告
    print("\n=== 生成综合分析报告 ===")
    report = f"""
# T3_alpha v1.2：男胎Y染色体浓度达标时间分析报告

## 问题背景
分析男胎Y染色体浓度达标时间受多种因素（身高、体重、年龄等）的影响，综合考虑这些因素、检测误差和胎儿的Y染色体浓度达标比例（≥4%），根据男胎孕妇的BMI给出合理分组以及每组的最佳NIPT时点，使得孕妇潜在风险最小。

## 分析概述
- 分析时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- 总样本数: {len(data)}
- 男胎样本数: {len(male_data)}
- Y染色体浓度达标样本数: {male_data['Y染色体达标'].sum()}
- Y染色体浓度达标比例: {达标比例:.2%}

## 主要发现

### 1. Y染色体浓度达标影响因素
"""
    
    for feature, corr in y_corr.items():
        report += f"- **{feature}**: {corr:.4f}\n"
    
    report += f"""
### 2. BMI分组分析
"""
    
    for group, ratio in 达标比例_by_group.items():
        report += f"- **{group}**: {ratio:.2%}\n"
    
    report += f"""
### 3. 最佳NIPT时点
"""
    
    for group, data in optimal_timing.items():
        report += f"- **{group}**: {data['最佳孕周']:.1f}周, 达标率 {data['达标率']:.2%}\n"
    
    report += f"""
### 4. 检测误差影响
"""
    
    for level, data in error_impact.items():
        report += f"- **{level}**: 影响程度 {data['影响程度']:.2%}\n"
    
    report += f"""
### 5. 风险最小化分析
"""
    
    for group, data in risk_analysis.items():
        report += f"- **{group}**: 风险率 {data['风险率']:.2%}, 平均孕周 {data['平均孕周']:.1f}周\n"
    
    report += f"""
## 结论与建议

### 主要结论
1. **影响因素**: 孕周数值是影响Y染色体浓度达标的最重要因素
2. **BMI分组**: 不同BMI组在Y染色体浓度达标方面存在显著差异
3. **最佳时点**: 各BMI组的最佳NIPT时点存在差异，需要个性化制定
4. **误差影响**: 检测误差对结果有显著影响，需要严格控制

### 临床建议
1. **个性化检测**: 根据孕妇BMI制定个性化的NIPT检测时点
2. **质量控制**: 严格控制检测误差，确保结果可靠性
3. **风险分层**: 对高风险组进行重点监测
4. **动态调整**: 根据实际情况动态调整检测策略

---
*报告生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
    """
    
    # 保存报告
    with open(os.path.join(results_dir, 'T3_alpha_v1.2_Y染色体分析报告.md'), 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"综合分析报告已保存到: {results_dir}")
    print("✅ T3_alpha v1.2 Y染色体浓度达标时间分析完成！")

if __name__ == "__main__":
    main()
