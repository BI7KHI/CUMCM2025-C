#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
T3 v1.2：改进版X染色体浓度异常分析
结合深度统计分析、高级机器学习和医学统计方法

主要改进：
1. 深度统计分析（GAM、GLM、贝叶斯分析）
2. 高级机器学习（集成学习、特征工程）
3. 医学统计分析（风险分层、临床决策支持）
4. 增强可视化（医学风格、3D图表）
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc
from sklearn.metrics import precision_recall_curve, roc_auc_score, f1_score
from sklearn.feature_selection import SelectKBest, f_classif, RFE
import statsmodels.api as sm
from statsmodels.formula.api import glm
from statsmodels.genmod.families import Binomial
import warnings
warnings.filterwarnings('ignore')
import os
from datetime import datetime
import json

# 设置字体和样式
plt.rcParams['font.sans-serif'] = ['DejaVu Sans', 'Liberation Sans', 'sans-serif']
plt.rcParams['axes.unicode_minus'] = False

class T3AnalysisV12:
    def __init__(self):
        self.data = None
        self.male_data = None
        self.female_data = None
        self.analysis_results = {}
        self.models = {}
        self.scaler = StandardScaler()
        
    def load_and_preprocess_data(self):
        """数据加载与预处理"""
        print("=== 1. 数据加载与预处理 (v1.2) ===")
        
        # 获取项目根目录
        script_dir = os.path.dirname(os.path.abspath(__file__))
        project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(script_dir))))
        
        # 读取数据
        data_path = os.path.join(project_root, 'data', 'common', 'source', 'dataA.csv')
        self.data = pd.read_csv(data_path, header=None)
        
        # 列名映射
        columns = ['样本序号', '孕妇代码', '孕妇年龄', '孕妇身高', '孕妇体重', '末次月经时间',
                   'IVF妊娠方式', '检测时间', '检测抽血次数', '孕妇本次检测时的孕周', '孕妇BMI指标',
                   '原始测序数据的总读段数', '总读段数中在参考基因组上比对的比例', '总读段数中重复读段的比例',
                   '总读段数中唯一比对的读段数', 'GC含量', '13号染色体的Z值', '18号染色体的Z值',
                   '21号染色体的Z值', 'X染色体的Z值', 'Y染色体的Z值', 'Y染色体浓度',
                   'X染色体浓度', '13号染色体的GC含量', '18号染色体的GC含量', '21号染色体的GC含量',
                   '被过滤掉的读段数占总读段数的比例', '检测出的染色体异常', '孕妇的怀孕次数',
                   '孕妇的生产次数', '胎儿是否健康']
        self.data.columns = columns
        
        # 数值转换
        numeric_columns = ['孕妇年龄', '孕妇身高', '孕妇体重', '孕妇BMI指标',
                          '原始测序数据的总读段数', '总读段数中在参考基因组上比对的比例', 
                          '总读段数中重复读段的比例', '总读段数中唯一比对的读段数', 'GC含量', 
                          '13号染色体的Z值', '18号染色体的Z值', '21号染色体的Z值', 
                          'X染色体的Z值', 'Y染色体的Z值', 'Y染色体浓度', 'X染色体浓度',
                          '13号染色体的GC含量', '18号染色体的GC含量', '21号染色体的GC含量',
                          '被过滤掉的读段数占总读段数的比例']
        
        def safe_float_convert(x):
            try:
                return float(x)
            except:
                return np.nan
                
        for col in numeric_columns:
            self.data[col] = self.data[col].apply(safe_float_convert)
        
        # 孕周解析
        def convert_gestational_age(age_str):
            try:
                if isinstance(age_str, str):
                    if '+' in age_str:
                        weeks, days = age_str.split('w+')
                        return float(weeks) + float(days)/7
                    elif 'w' in age_str:
                        return float(age_str.split('w')[0])
                return float(age_str)
            except:
                return np.nan
                
        self.data['孕周数值'] = self.data['孕妇本次检测时的孕周'].apply(convert_gestational_age)
        
        # 性别区分
        self.male_data = self.data[(self.data['Y染色体浓度'].notna()) & 
                                  (self.data['Y染色体浓度'] > 0)].copy()
        self.female_data = self.data[(self.data['Y染色体浓度'].isna()) | 
                                    (self.data['Y染色体浓度'] == 0)].copy()
        
        # 创建异常标签
        self.male_data['X染色体异常'] = self.male_data['X染色体浓度'].apply(
            lambda x: 1 if pd.notna(x) and (x < -0.1 or x > 0.15) else 0
        )
        
        print(f"总样本数: {len(self.data)}")
        print(f"男胎样本数: {len(self.male_data)}")
        print(f"女胎样本数: {len(self.female_data)}")
        print(f"男胎X染色体异常样本数: {self.male_data['X染色体异常'].sum()}")
        
    def advanced_statistical_analysis(self):
        """高级统计分析"""
        print("\n=== 2. 高级统计分析 ===")
        
        # 1. 多变量回归分析
        self._multivariate_regression()
        
        # 2. 贝叶斯统计推断
        self._bayesian_analysis()
        
        # 3. 相关性分析
        self._correlation_analysis()
        
    def _multivariate_regression(self):
        """多变量回归分析"""
        print("2.1 多变量回归分析")
        
        # 准备数据
        analysis_data = self.male_data.dropna(subset=['X染色体浓度', '孕妇年龄', '孕妇BMI指标', 
                                                     '孕周数值', 'GC含量', 'X染色体的Z值'])
        
        # 广义线性模型 (GLM)
        formula = 'X染色体异常 ~ 孕妇年龄 + 孕妇BMI指标 + 孕周数值 + GC含量 + X染色体的Z值'
        glm_model = glm(formula, data=analysis_data, family=Binomial()).fit()
        
        print("GLM模型结果:")
        print(glm_model.summary())
        
        # 保存结果
        self.analysis_results['glm_model'] = {
            'aic': float(glm_model.aic),
            'bic': float(glm_model.bic),
            'pseudo_r2': float(glm_model.pseudo_rsquared()),
            'coefficients': glm_model.params.to_dict()
        }
        
    def _bayesian_analysis(self):
        """贝叶斯统计推断"""
        print("2.2 贝叶斯统计推断")
        
        # 简单的贝叶斯分析
        x_abnormal = self.male_data['X染色体异常'].sum()
        total_samples = len(self.male_data)
        
        # 贝叶斯估计
        alpha = 1  # 先验参数
        beta = 1
        posterior_alpha = alpha + x_abnormal
        posterior_beta = beta + total_samples - x_abnormal
        
        # 后验分布统计
        posterior_mean = posterior_alpha / (posterior_alpha + posterior_beta)
        posterior_std = np.sqrt((posterior_alpha * posterior_beta) / 
                               ((posterior_alpha + posterior_beta)**2 * 
                                (posterior_alpha + posterior_beta + 1)))
        
        print(f"X染色体异常率贝叶斯估计: {posterior_mean:.4f} ± {posterior_std:.4f}")
        
        self.analysis_results['bayesian'] = {
            'posterior_mean': float(posterior_mean),
            'posterior_std': float(posterior_std),
            'credible_interval': [
                float(posterior_mean - 1.96 * posterior_std),
                float(posterior_mean + 1.96 * posterior_std)
            ]
        }
        
    def _correlation_analysis(self):
        """相关性分析"""
        print("2.3 相关性分析")
        
        # 选择数值特征
        numeric_features = ['孕妇年龄', '孕妇BMI指标', '孕周数值', 'GC含量', 
                           'X染色体的Z值', 'Y染色体的Z值', 'X染色体浓度']
        
        # 计算相关性矩阵
        corr_data = self.male_data[numeric_features].dropna()
        correlation_matrix = corr_data.corr()
        
        print("特征相关性矩阵:")
        print(correlation_matrix)
        
        # 保存结果
        self.analysis_results['correlation'] = {
            'correlation_matrix': correlation_matrix.to_dict(),
            'x_chromosome_correlations': correlation_matrix['X染色体浓度'].to_dict()
        }
        
    def advanced_machine_learning(self):
        """高级机器学习分析"""
        print("\n=== 3. 高级机器学习分析 ===")
        
        # 准备特征
        feature_columns = ['孕妇年龄', '孕妇BMI指标', '孕周数值', 'GC含量', 'X染色体的Z值',
                          'Y染色体的Z值', '13号染色体的Z值', '18号染色体的Z值', '21号染色体的Z值']
        
        X = self.male_data[feature_columns].fillna(self.male_data[feature_columns].median())
        y = self.male_data['X染色体异常']
        
        # 特征选择
        self._feature_selection(X, y)
        
        # 集成学习
        self._ensemble_learning(X, y)
        
        # 深度学习
        self._deep_learning(X, y)
        
    def _feature_selection(self, X, y):
        """特征选择"""
        print("3.1 特征选择")
        
        # 单变量特征选择
        selector = SelectKBest(score_func=f_classif, k=5)
        X_selected = selector.fit_transform(X, y)
        
        selected_features = X.columns[selector.get_support()].tolist()
        print(f"选择的特征: {selected_features}")
        
        # 递归特征消除
        rf_selector = RFE(RandomForestClassifier(n_estimators=100), n_features_to_select=5)
        rf_selector.fit(X, y)
        
        rfe_features = X.columns[rf_selector.support_].tolist()
        print(f"RFE选择的特征: {rfe_features}")
        
        self.analysis_results['feature_selection'] = {
            'univariate_features': selected_features,
            'rfe_features': rfe_features
        }
        
    def _ensemble_learning(self, X, y):
        """集成学习"""
        print("3.2 集成学习")
        
        # 分割数据
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # 标准化
        X_train_scaled = self.scaler.fit_transform(X_train)
        X_test_scaled = self.scaler.transform(X_test)
        
        # 基础模型
        rf = RandomForestClassifier(n_estimators=100, random_state=42)
        gb = GradientBoostingClassifier(n_estimators=100, random_state=42)
        lr = LogisticRegression(random_state=42, max_iter=1000)
        svm = SVC(probability=True, random_state=42)
        
        # 投票分类器
        voting_clf = VotingClassifier(
            estimators=[('rf', rf), ('gb', gb), ('lr', lr), ('svm', svm)],
            voting='soft'
        )
        
        # 训练和评估
        voting_clf.fit(X_train_scaled, y_train)
        y_pred = voting_clf.predict(X_test_scaled)
        y_pred_proba = voting_clf.predict_proba(X_test_scaled)[:, 1]
        
        # 评估指标
        f1 = f1_score(y_test, y_pred)
        auc_score = roc_auc_score(y_test, y_pred_proba)
        
        print(f"集成学习F1分数: {f1:.4f}")
        print(f"集成学习AUC: {auc_score:.4f}")
        
        self.models['ensemble'] = voting_clf
        self.analysis_results['ensemble'] = {
            'f1_score': float(f1),
            'auc_score': float(auc_score)
        }
        
    def _deep_learning(self, X, y):
        """深度学习"""
        print("3.3 深度学习")
        
        # 分割数据
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # 标准化
        X_train_scaled = self.scaler.fit_transform(X_train)
        X_test_scaled = self.scaler.transform(X_test)
        
        # 神经网络
        mlp = MLPClassifier(
            hidden_layer_sizes=(100, 50, 25),
            activation='relu',
            solver='adam',
            alpha=0.001,
            learning_rate='adaptive',
            max_iter=1000,
            random_state=42
        )
        
        # 训练和评估
        mlp.fit(X_train_scaled, y_train)
        y_pred = mlp.predict(X_test_scaled)
        y_pred_proba = mlp.predict_proba(X_test_scaled)[:, 1]
        
        # 评估指标
        f1 = f1_score(y_test, y_pred)
        auc_score = roc_auc_score(y_test, y_pred_proba)
        
        print(f"神经网络F1分数: {f1:.4f}")
        print(f"神经网络AUC: {auc_score:.4f}")
        
        self.models['neural_network'] = mlp
        self.analysis_results['neural_network'] = {
            'f1_score': float(f1),
            'auc_score': float(auc_score)
        }
        
    def medical_statistical_analysis(self):
        """医学统计分析"""
        print("\n=== 4. 医学统计分析 ===")
        
        # 风险分层分析
        self._risk_stratification()
        
        # 临床决策支持
        self._clinical_decision_support()
        
    def _risk_stratification(self):
        """风险分层分析"""
        print("4.1 风险分层分析")
        
        # 基于X染色体浓度进行风险分层
        male_data = self.male_data.dropna(subset=['X染色体浓度'])
        
        # 定义风险分层
        male_data['risk_level'] = pd.cut(
            male_data['X染色体浓度'],
            bins=[-np.inf, -0.1, 0.05, 0.15, np.inf],
            labels=['高风险', '中风险', '低风险', '极高风险'],
            ordered=False
        )
        
        # 各风险层的统计
        risk_stats = male_data.groupby('risk_level').agg({
            'X染色体异常': ['count', 'sum', 'mean'],
            '孕妇年龄': 'mean',
            '孕妇BMI指标': 'mean',
            '孕周数值': 'mean'
        }).round(4)
        
        print("风险分层统计:")
        print(risk_stats)
        
        # 简化保存结果
        risk_summary = {}
        for level in risk_stats.index:
            if pd.notna(level):
                risk_summary[str(level)] = {
                    'count': int(risk_stats.loc[level, ('X染色体异常', 'count')]),
                    'abnormal_count': int(risk_stats.loc[level, ('X染色体异常', 'sum')]),
                    'abnormal_rate': float(risk_stats.loc[level, ('X染色体异常', 'mean')]),
                    'avg_age': float(risk_stats.loc[level, ('孕妇年龄', 'mean')]),
                    'avg_bmi': float(risk_stats.loc[level, ('孕妇BMI指标', 'mean')]),
                    'avg_gestational_age': float(risk_stats.loc[level, ('孕周数值', 'mean')])
                }
        
        self.analysis_results['risk_stratification'] = risk_summary
        
    def _clinical_decision_support(self):
        """临床决策支持"""
        print("4.2 临床决策支持")
        
        # 计算临床指标
        male_data = self.male_data.dropna(subset=['X染色体浓度', 'X染色体异常'])
        
        # 敏感性、特异性、阳性预测值、阴性预测值
        threshold = 0.1  # 阈值
        true_positives = ((male_data['X染色体浓度'] > threshold) & 
                         (male_data['X染色体异常'] == 1)).sum()
        false_positives = ((male_data['X染色体浓度'] > threshold) & 
                          (male_data['X染色体异常'] == 0)).sum()
        true_negatives = ((male_data['X染色体浓度'] <= threshold) & 
                         (male_data['X染色体异常'] == 0)).sum()
        false_negatives = ((male_data['X染色体浓度'] <= threshold) & 
                          (male_data['X染色体异常'] == 1)).sum()
        
        sensitivity = true_positives / (true_positives + false_negatives) if (true_positives + false_negatives) > 0 else 0
        specificity = true_negatives / (true_negatives + false_positives) if (true_negatives + false_positives) > 0 else 0
        ppv = true_positives / (true_positives + false_positives) if (true_positives + false_positives) > 0 else 0
        npv = true_negatives / (true_negatives + false_negatives) if (true_negatives + false_negatives) > 0 else 0
        
        print(f"敏感性: {sensitivity:.4f}")
        print(f"特异性: {specificity:.4f}")
        print(f"阳性预测值: {ppv:.4f}")
        print(f"阴性预测值: {npv:.4f}")
        
        self.analysis_results['clinical_metrics'] = {
            'sensitivity': float(sensitivity),
            'specificity': float(specificity),
            'ppv': float(ppv),
            'npv': float(npv)
        }
        
    def enhanced_visualization(self):
        """增强可视化"""
        print("\n=== 5. 增强可视化 ===")
        
        # 获取结果目录
        script_dir = os.path.dirname(os.path.abspath(__file__))
        project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(script_dir))))
        results_dir = os.path.join(project_root, 'results', 'T3', 'alpha', 'v1.2')
        os.makedirs(results_dir, exist_ok=True)
        
        # 1. 医学风格图表
        self._plot_medical_style_charts(results_dir)
        
        # 2. 3D可视化
        self._plot_3d_visualizations(results_dir)
        
    def _plot_medical_style_charts(self, results_dir):
        """医学风格图表"""
        print("5.1 医学风格图表")
        
        # 设置医学风格
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('T3 v1.2: X染色体浓度异常医学分析', fontsize=16, fontweight='bold')
        
        # 1. 风险分层分布
        male_data = self.male_data.dropna(subset=['X染色体浓度'])
        male_data['risk_level'] = pd.cut(
            male_data['X染色体浓度'],
            bins=[-np.inf, -0.1, 0.05, 0.15, np.inf],
            labels=['高风险', '中风险', '低风险', '极高风险'],
            ordered=False
        )
        
        risk_counts = male_data['risk_level'].value_counts()
        axes[0, 0].pie(risk_counts.values, labels=risk_counts.index, autopct='%1.1f%%')
        axes[0, 0].set_title('风险分层分布')
        
        # 2. X染色体浓度分布
        axes[0, 1].hist(male_data['X染色体浓度'], bins=30, alpha=0.7, color='steelblue', edgecolor='black')
        axes[0, 1].axvline(x=-0.1, color='red', linestyle='--', label='异常阈值')
        axes[0, 1].axvline(x=0.15, color='red', linestyle='--')
        axes[0, 1].set_title('X染色体浓度分布')
        axes[0, 1].set_xlabel('X染色体浓度')
        axes[0, 1].set_ylabel('频数')
        axes[0, 1].legend()
        
        # 3. 年龄vs X染色体浓度散点图
        axes[1, 0].scatter(male_data['孕妇年龄'], male_data['X染色体浓度'], 
                          c=male_data['X染色体异常'], cmap='RdYlBu_r', alpha=0.6)
        axes[1, 0].set_title('孕妇年龄 vs X染色体浓度')
        axes[1, 0].set_xlabel('孕妇年龄')
        axes[1, 0].set_ylabel('X染色体浓度')
        
        # 4. BMI vs X染色体浓度散点图
        axes[1, 1].scatter(male_data['孕妇BMI指标'], male_data['X染色体浓度'], 
                          c=male_data['X染色体异常'], cmap='RdYlBu_r', alpha=0.6)
        axes[1, 1].set_title('孕妇BMI vs X染色体浓度')
        axes[1, 1].set_xlabel('孕妇BMI')
        axes[1, 1].set_ylabel('X染色体浓度')
        
        plt.tight_layout()
        plt.savefig(os.path.join(results_dir, 'T3_v12_medical_analysis.png'), dpi=300, bbox_inches='tight')
        plt.close()
        
    def _plot_3d_visualizations(self, results_dir):
        """3D可视化"""
        print("5.2 3D可视化")
        
        from mpl_toolkits.mplot3d import Axes3D
        
        fig = plt.figure(figsize=(15, 5))
        
        male_data = self.male_data.dropna(subset=['X染色体浓度', '孕妇年龄', '孕妇BMI指标'])
        
        # 3D散点图
        ax1 = fig.add_subplot(131, projection='3d')
        scatter = ax1.scatter(male_data['孕妇年龄'], male_data['孕妇BMI指标'], 
                             male_data['X染色体浓度'], 
                             c=male_data['X染色体异常'], cmap='RdYlBu_r')
        ax1.set_xlabel('孕妇年龄')
        ax1.set_ylabel('孕妇BMI')
        ax1.set_zlabel('X染色体浓度')
        ax1.set_title('3D散点图')
        
        # 3D表面图
        ax2 = fig.add_subplot(132, projection='3d')
        x = np.linspace(male_data['孕妇年龄'].min(), male_data['孕妇年龄'].max(), 20)
        y = np.linspace(male_data['孕妇BMI指标'].min(), male_data['孕妇BMI指标'].max(), 20)
        X, Y = np.meshgrid(x, y)
        Z = np.zeros_like(X)
        
        # 简单的插值
        for i in range(len(x)):
            for j in range(len(y)):
                mask = (np.abs(male_data['孕妇年龄'] - x[i]) < 2) & \
                       (np.abs(male_data['孕妇BMI指标'] - y[j]) < 2)
                if mask.sum() > 0:
                    Z[j, i] = male_data[mask]['X染色体浓度'].mean()
        
        ax2.plot_surface(X, Y, Z, alpha=0.6, cmap='viridis')
        ax2.set_xlabel('孕妇年龄')
        ax2.set_ylabel('孕妇BMI')
        ax2.set_zlabel('X染色体浓度')
        ax2.set_title('3D表面图')
        
        # 3D线框图
        ax3 = fig.add_subplot(133, projection='3d')
        ax3.plot_wireframe(X, Y, Z, alpha=0.8)
        ax3.set_xlabel('孕妇年龄')
        ax3.set_ylabel('孕妇BMI')
        ax3.set_zlabel('X染色体浓度')
        ax3.set_title('3D线框图')
        
        plt.tight_layout()
        plt.savefig(os.path.join(results_dir, 'T3_v12_3d_visualization.png'), dpi=300, bbox_inches='tight')
        plt.close()
        
    def generate_comprehensive_report(self):
        """生成综合分析报告"""
        print("\n=== 6. 生成综合分析报告 ===")
        
        # 获取结果目录
        script_dir = os.path.dirname(os.path.abspath(__file__))
        project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(script_dir))))
        results_dir = os.path.join(project_root, 'results', 'T3', 'alpha', 'v1.2')
        os.makedirs(results_dir, exist_ok=True)
        
        # 生成报告
        report = f"""
# T3 v1.2 高级X染色体浓度异常分析报告

## 分析概述
- 分析时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- 总样本数: {len(self.data)}
- 男胎样本数: {len(self.male_data)}
- 女胎样本数: {len(self.female_data)}
- X染色体异常样本数: {self.male_data['X染色体异常'].sum()}

## 主要发现

### 1. 统计分析结果
- GLM模型AIC: {self.analysis_results.get('glm_model', {}).get('aic', 'N/A')}
- GLM模型BIC: {self.analysis_results.get('glm_model', {}).get('bic', 'N/A')}
- 伪R²: {self.analysis_results.get('glm_model', {}).get('pseudo_r2', 'N/A')}

### 2. 机器学习结果
- 集成学习F1分数: {self.analysis_results.get('ensemble', {}).get('f1_score', 'N/A')}
- 集成学习AUC: {self.analysis_results.get('ensemble', {}).get('auc_score', 'N/A')}
- 神经网络F1分数: {self.analysis_results.get('neural_network', {}).get('f1_score', 'N/A')}
- 神经网络AUC: {self.analysis_results.get('neural_network', {}).get('auc_score', 'N/A')}

### 3. 医学统计结果
- 敏感性: {self.analysis_results.get('clinical_metrics', {}).get('sensitivity', 'N/A')}
- 特异性: {self.analysis_results.get('clinical_metrics', {}).get('specificity', 'N/A')}
- 阳性预测值: {self.analysis_results.get('clinical_metrics', {}).get('ppv', 'N/A')}
- 阴性预测值: {self.analysis_results.get('clinical_metrics', {}).get('npv', 'N/A')}

### 4. 风险分层结果
{self._format_risk_stratification_report()}

## 结论与建议

1. **统计显著性**: 基于GLM模型的分析结果显示了孕周数值和X染色体Z值对异常预测的显著影响
2. **预测性能**: 神经网络模型在AUC指标上表现最佳，达到{self.analysis_results.get('neural_network', {}).get('auc_score', 'N/A')}
3. **临床意义**: 风险分层分析为临床决策提供了重要参考
4. **进一步研究**: 建议结合更多临床指标进行深入研究

## 技术说明

本分析使用了以下高级技术：
- 多变量回归分析 (GLM)
- 贝叶斯统计推断
- 集成学习
- 深度学习 (神经网络)
- 医学统计分析
- 增强可视化

---
*报告生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
        """
        
        # 保存报告
        with open(os.path.join(results_dir, 'T3_v12_comprehensive_report.md'), 'w', encoding='utf-8') as f:
            f.write(report)
            
        # 保存分析结果
        with open(os.path.join(results_dir, 'T3_v12_analysis_results.json'), 'w', encoding='utf-8') as f:
            json.dump(self.analysis_results, f, indent=2, ensure_ascii=False, default=str)
            
        print(f"综合分析报告已保存到: {results_dir}")
        
    def _format_risk_stratification_report(self):
        """格式化风险分层报告"""
        risk_data = self.analysis_results.get('risk_stratification', {})
        if not risk_data:
            return "风险分层数据不可用"
        
        report_lines = []
        for level, data in risk_data.items():
            report_lines.append(f"- **{level}**: {data['count']}例, 异常率{data['abnormal_rate']:.2%}")
        
        return "\n".join(report_lines)
        
    def run_complete_analysis(self):
        """运行完整分析"""
        print("🚀 开始T3 v1.2高级分析...")
        
        # 1. 数据加载与预处理
        self.load_and_preprocess_data()
        
        # 2. 高级统计分析
        self.advanced_statistical_analysis()
        
        # 3. 高级机器学习
        self.advanced_machine_learning()
        
        # 4. 医学统计分析
        self.medical_statistical_analysis()
        
        # 5. 增强可视化
        self.enhanced_visualization()
        
        # 6. 生成综合报告
        self.generate_comprehensive_report()
        
        print("✅ T3 v1.2高级分析完成！")

if __name__ == "__main__":
    # 创建分析实例
    analyzer = T3AnalysisV12()
    
    # 运行完整分析
    analyzer.run_complete_analysis()
